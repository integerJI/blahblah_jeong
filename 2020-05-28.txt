## 점프 투 파이썬 - 강력한 정규 표현식의 세계로

출처 : https://wikidocs.net/4309

# 전방 탐색
ex)
p = re.compile(".+:")
m = p.search("http://google.com")
print(m.group()) >>> http:

정규식 .+:과 일치하는 문자열로 http:를 돌려준다.
검색 결과의 : 를 제외하고 하는 법

1. 긍정형 전방 탐색((?=...)) - ... 에 해당되는 정규식과 매치되어야 하며 조건이 통과되어도 문자열이 소비되지 않는다.
2. 부정형 전방 탐색((?!...)) - ...에 해당되는 정규식과 매치되지 않아야 하며 조건이 통과되어도 문자열이 소비되지 않는다.

# 긍정형 전방 탐색
ex)
p = re.compile(".+(?=:)")
m = p.search("http://google.com")
print(m.group()) >>> http

기존 정규식과 검색에서는 동일한 효과를 발휘하지만 : 에 해당하는 문자열이 정규식 엔진에 의해 소비되지 않아(검색에는 포함되지만 검색 결과에는 제외됨) 검색 결과에서는 :이 제거된 후 돌려주는 효과가 있다.

ex)
.*[.].*$

해당 정규식은 파일 이름 + . + 확장자를 나타내는 정규식이며
foo.bar, autoexec.bat, sendmail.cf 같은 형식의 파일과 매치된다.

.*[.][^b].*$

확장자가 bat인 파일은 제외하는 조건을 추가하였다.

.*[.]([^b]..|.[^a].|..[^t])$

확장자가 b라는 문자로 시작하면 안된다는 조건을 추가하였다.


 | 메타 문자를 사용하여 확장자의 첫 번째 문자가 b가 아니거나 두 번째 문자가 a가 아니거나 세 번째 문자가 t가 아닌 경우를 의미한다.

하지만 이 정규식은 아쉽게도 sendmail.cf처럼 확장자의 문자 개수가 2개인 케이스를 포함하지 못하는 오동작을 하기 시작한다.

이를 해결 하려면?

.*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$

확장자의 문자 개수가 2개여도 통과된다. 

조건이 추가될수록 정규식을 구현하려면 패턴은 더욱더 복잡해진다.

# 부정형 전방 탐색
ex)
.*[.](?!bat$).*$

확장자가 bat가 아닌 경우에만 통과한다.
bat 문자열이 있는지 조사하는 과정에서 문자열이 소비되지 않으므로 bat가 아니라고 판단되면 그 이후 정규식 매치가 진행된다.

.*[.](?!bat$|exe$).*$

exe를 제외해 보았다. 간단하게 표현이 가능하다.














